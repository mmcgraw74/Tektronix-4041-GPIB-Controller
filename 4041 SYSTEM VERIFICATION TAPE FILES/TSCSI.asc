100Sub scsi
110On abor then call sc_abrt
120Prin"SCSI SWITCH TEST"
130Call swtchtst
140If not(proced("TARGET AVAILABLE?"))then goto sc_done
150Call datinout
160Sc_done:!
170Prin"SCSI TEST DONE"
190Dele var a,b,c
200Retu
210End
300Sub swtchtst loca start,loop,sw_chk,ender,myad,syad,syun
310!
320!  This is the switch checker for the Opt 3 rear panel.  It asks
330!  logical unit 2, which is set up for disk in physical mode what
340!  the switch settings are, and uses this information
350!  to determine if all the switches work.
360!         Written 5/29/84
370!
380Inte myad,syad,syun,a,b,c
390Start:!
400Prin"set SCSI switches to 0"
410Loop:!  This loop waits for the operator to
420!     set the switches to 0.  If they dont go to 0 within
430!     10 seconds, the operator has an opportunity to abort
440!     and recover the switch data
450For i=1 to 20
460Wait 1
470Call sw_get
480If a+b+c=0 then goto sw_chk
490Next i
500If not(proced("DONE YET?"))then goto loop
510Prin#"prin:":"The switches show"
520Prin#"prin:"usin"9b":64*c+8*b+a
530Goto ender
540Sw_chk:!  This loop watches the changes in the stream spec
550!        and prints out the changes to the paper tape allowing
560!        a hard copy of the switch process.  Since order is not a
570!        requirement, if two switches are pressed, going back
580!        is reasonable.  If two switches are tied together, the
590!        this too should show up.
600Prin"set SCSI switches to 1 singly"
610Myad=0
620Syad=0
630Syun=0
640Call sw_get
650If a=myad and b=syad and c=syun then goto 640
660Prin#"prin:"usin"9b":64*c+8*b+a
670Myad=a
680Syad=b
690Syun=c
700If a=7 and b=7 and c=7 then goto ender
710Goto 640
720Ender:retu
730End
800Sub sw_get loca full$
810Dim full$ to 512
820Open#2:"disk(phy=yes):"
830Full$=ask$("lu",2)
840A=valc(full$,pos(full$,"ADR",1))mod 10
850B=valc(full$,pos(full$,"DEV",1))
860C=valc(full$,pos(full$,"UNI",1))
870Clos 2
880Retu
890End
1000Sub datinout loca diskdir$,sector,oldata$,newdata$,compare$,data_ok,i,exists,disk_err,type$,err_num,j
1010Dim diskdir$ to 72,oldata$ to 512,newdata$ to 512,compare$ to 512,type$ to 3
1020J=proced("SET SCSI SWITCHES")
1030Call sw_get
1040If not(proced("MY ADDR = "&str$(a)&"? "))then goto 1020
1050If not(proced("DEV ADD = "&str$(b)&"? "))then goto 1020
1060If not(proced("DEV UNI = "&str$(c)&"? "))then goto 1020
1070Inte sector,i,err_num
1080Type$="new"
1090On erro(1200 to 1456)then gosu disk_err
1100On erro(1204)then gosu exists
1110Open#2:"disk:diagnostics(open="&type$&",size=1)",diskdir$
1120Sector=val(seg$(diskdir$,36,72))
1130Newdata$="U"
1140For i=1 to 9
1150Newdata$=newdata$&newdata$
1160Next i
1170Compare$=newdata$
1180Open#2:"disk(phy=yes):"
1190Rbyt#2:sector,oldata$!Read in original data
1200Wbyt#2:sector,newdata$!Write out pattern
1210Rbyt#2:sector,newdata$!Read back in pattern
1220Wbyt#2:sector,oldata$!Write out original pattern
1230Clos 2
1240If type$="new"then dele file"disk:diagnostics"
1250If newdata$=compare$ then goto data_ok
1260Prin"Data miscompare on disk"
1270Data_ok:retu
1280Disk_err:err_num=val(seg$(ask$("error"),1,10))
1290Prin"Disk error # ";err_num;" While testing read/write"
1300Bran data_ok
1310Exists:type$="old"
1320Bran 1110
1330End
1400Sub sc_abrt
1410Bran sc_done
1420End
