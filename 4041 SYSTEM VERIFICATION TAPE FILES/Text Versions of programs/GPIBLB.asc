  100 Sub gpiblb local abrt,errhan1,errhan2,data0$,data1$,testdone,errfound,errhan,err$,tran_err,strt_dma,otherway,dmaerr1,dmaerr2  110   !  120   !  *******************************************  130   !  * GPIB STANDARD TO OPTIONAL LOOPBACK TEST *  140   !  *******************************************  150   !  160   ! Initialization  170   !  180     On abort then gosub abrt  190     On error(999) then gosub errhan  200     Dim data0$ to 60,data1$ to 60  210     Dim err$ to 3  220   !  230     Print "GPIB LOOPBACK TEST"  240     If not(proced("INSTALL GPIB CABLE.")) then goto testdone  250     Data0$="THIS IS A TEST OF THE STANDARD TO OPTIONAL GPIB LOOPBACK"  260     Print "STARTING TRANSFER"  270     Set driver "gpib1(sc=no,ma=29):"  280     Open #1:"gpib0(pri=29,tim=20,eom=<0>):"  290     Open #3:"gpib1(tim=20,eom=<0>):"  300     Set proceed 1  310     Print #1:data0$  320     Input #3:data1$  330     Set proceed 0  340     If (data1$=data0$) then goto otherway  350     Print "ERROR GPIB0 => GPIB1"  360     Goto tran_err  370 Otherway:   !  380     Set proceed 1  390     Input #1:data1$  400     Print #3:data0$  410     Set proceed 0  420     If (data1$=data0$) then goto strt_dma  430     Print "ERROR GPIB0 <= GPIB1"  440   !  450 Tran_err:   ! Report error in transfer  460     Print "ERROR IN TRANSFER"  470     Open #2:"PRIN:"  480     Print #2:"DATA SENT:"  490     Print #2:data0$  500     Print #2:  510     Print #2:"DATA RECEIVED:"  520     Print #2:data1$  530     Close 2  540     Goto errfound  550 Strt_dma:   !  560     Print "TRANSFER COMPLETE"  570     Close 3  580     Open #3:"gpib1(tra=dma,tim=20,eom=<0>):"  590     Print "STARTING DMA TRANSFER"  600     If not(dmatest(1,3)) then goto dmaerr2  610     If not(dmatest(3,1)) then goto dmaerr1  620     Goto testdone  630 Dmaerr1:   !  640     Print "ERROR GPIB0 => GPIB1(DMA)"  650     Print "ERROR IN TRANSFER"  660     Goto errfound  670 Dmaerr2:   !  680     Print "ERROR GPIB0 <= GPIB1(DMA)"  690     Print "ERROR IN TRANSFER"  700     Goto errfound  710   !  720 Testdone:   !  730     Print "TRANSFER COMPLETE"  740 Errfound:   !  750     Print "REMOVE GPIB CABLE"  760     Print "GPIB TEST EXIT"  770     Close all  780     Return  790 Abrt:   ! <ABORT> handler  800     Print "TEST ABORTED"  810     Branch testdone  820 Errhan:   !  830     Err$=seg$(ask$("error"),12,3)  840     If err$="811" then branch errhan1  850     If err$="812" then branch errhan2  860     Branch testdone  870 Errhan1:   !  880     Print "TIME OUT ERROR - TEST ABORTED"  890     Print #"prin:":"TIME OUT ERROR"  900     Goto errfound  910 Errhan2:   !  920     Print "GPIB CABLE NOT CONNECTED - TEST ABORTED"  930     Print #"prin:":"CABLE NOT CONNECTED"  940     Goto errfound  950     End 1000 Function dmatest(in_port,out_port) local errfound,memsize,count,j,k,datain$,dataout$ 1010   ! 1020   ! This function outputs strings of lengths of the power of two from 1030   ! the specified GPIB port.  The string is read in the specified GPIB 1040   ! port.  The strings are compared.  If a difference if found the 1050   ! function returns "0", otherwise it returns "1" 1060   ! 1070     Disable abort 1080     Compress all 1090     Integer memsize,count,j,k,in_port,out_port 1100   ! 1110     Memsize=(ask("memory")-512) min 32767 1120     Count=int(log(memsize)/log(2)) 1130     If count<10 then count=count-2 else count=10 1140     For j=1 to count 1150       Dim datain$ to 2^j,dataout$ to 2^j 1160       Dataout$="" 1170       For k=1 to 2^j 1180         Dataout$=chr$((k mod 32)+32)&dataout$ 1190         Next k 1200       Set proceed 1 1210       Input #in_port:datain$ 1220       Print #out_port:dataout$ 1230       Set proceed 0 1240       If (datain$<>dataout$) then exit to errfound 1250       Next j 1260     Dmatest=1 1270     Enable abort 1280     Return 1290 Errfound:   ! 1300     Dmatest=0 1310     Enable abort 1320     Return 1330     End