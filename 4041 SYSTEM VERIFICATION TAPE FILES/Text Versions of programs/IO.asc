  100 Sub stdio local abrt,done  110   !  120   !  *********************  130   !  * STANDARD I/O TEST *  140   !  *********************  150   !  160     On abort then gosub abrt  170     Print "STANDARD I/O TEST"  180     Call iotest("0")  190 Done:   !  200     Print "I/O TEST EXIT"  210     Return  220 Abrt:   !  230     Branch done  240     End  300 Sub optio local abrt,done  310   !  320   !  *********************  330   !  * OPTIONAL I/O TEST *  340   !  *********************  350   !  360     On abort then gosub abrt  370     Print "OPTIONAL I/O TEST"  380     Call iotest("1")  390 Done:   !  400     Print "I/O TEST EXIT"  410     Return  420 Abrt:   !  430     Branch done  440     End  500 Sub iotest(port$) local c$,in$,errors,i,abrt,tim_out,install,quit,done  510   !  520   !  *************************  530   !  * COMMON RS232 I/O TEST *  540   !  *************************  550   !  560     On abort then gosub abrt  570     On error(885) then gosub tim_out  580     Integer errors,i  590     Errors=0  600     Dim c$ to 1,in$ to 1,port$ to 1  610   !  620 Install:   !  630     Input prompt "INSTALL TEST ADAPTOR^G" #"frtp:":in$  640     If in$="0" then goto quit  650     If in$<>"1" and in$<>"" then goto install  660   !  670   ! Check modem control lines  680   !  690     Print #"frtp:":  700     Call ctl_test(port$)  710     On abort then gosub abrt  720     Print #"FRTP:":  730     Open #2:"COMM"&port$&"(tim=5,echo=no,eom=""^_""):"  740     For i=33 to 126  750       Print #2:chr$(i)  760       Input #2:c$  770       If c$<>chr$(i) then errors=errors+1  780       Next i  790 Done:   !  800     If errors>0 then print #"PRIN:":errors;" ERROR(S)"  810     Close 2  820 Quit:   !  830     Input prompt "REMOVE TEST ADAPTOR^G" #"frtp:":in$  840     Return  850   !  860 Abrt:   !  870     Branch done  880 Tim_out:   ! Handler for timeout error  890     Print #"PRIN:":"TIMEOUT -- INPUT"  900     Print #"PRIN:":"   ASCII CODE=";i  910     Branch done  920     End 1000 Sub ctl_test(port$) local stat$,abrt,drv$,i,j,cts$,dcd$,done,rts_st$,dtr_st$,next_i,next_j,first 1010   ! 1020   !  *********************** 1030   !  * SUBPROGRAM CTL_TEST * 1040   !  *********************** 1050   ! 1060   !  This subprogram tests the modem control lines using the loopback 1070   !  connector.  It first opens the RS232 port as passed in on logical 1080   !  unit 99 to save the current driver status. 1090   ! 1100   ! Initialization 1110   ! 1120     Disable abort 1130     Integer first 1140 Getdata:     data "ON","OFF" ! Used in the set driver 1150     Data "ON","OFF" ! Results of DTR 1160     Data "ON","ON","ON","OFF" ! Results of RTS 1170     Restore getdata 1180     Dim stat$(2) to 3 1190     Dim dtr_st$(2) to 3 1200     Dim rts_st$(2,2) to 3 1210     Read stat$,dtr_st$,rts_st$ 1220     First=1 1230     Dim drv$ to 275,port$ to 1 1240   ! 1250     Open #99:"comm"&port$&":" 1260     Drv$=ask$("lu",99) ! Get current status of driver 1270     Close 99 1280   ! 1290     For i=1 to 2 1300       Set driver "comm"&port$&"(dsr="&stat$(i)&"):" 1310       If dtr_st$(i)=get_att$("DTR",port$) then goto next_i 1320       If first then print #"PRIN:" using "'DSR DTR CTS DCD RTS',/,'-------------------'": 1330       First=0 1340       Print #"PRIN:" using "2(4A),'  -   -   -'":stat$(i),get_att$("DTR",port$) 1350 Next_i:   ! 1360       Next i 1370   ! 1380     For i=1 to 2 1390       Cts$=",CTS="&stat$(i) 1400       For j=1 to 2 1410         Dcd$="dcd="&stat$(j) 1420         Set driver "comm"&port$&"("&dcd$&cts$&"):" 1430         If rts_st$(i,j)=get_att$("RTS",port$) then goto next_j 1440         If first then print #"PRIN:" using "'DSR DTR CTS DCD RTS',/,'-------------------'": 1450         First=0 1460         Print #"PRIN:" using "' -   -  ',3(4A)":stat$(i),stat$(j),get_att$("RTS",port$) 1470 Next_j:   ! 1480         Next j 1490       Next i 1500   ! 1510 Done:   ! 1520     Set driver drv$ 1530     Enable abort 1540     Return 1550     End 1600 Function get_att$(att$,port$) local drv$,strt,fini 1610   ! 1620   !  ********************* 1630   !  * FUNCTION GET_ATT$ * 1640   !  ********************* 1650   ! 1660   !  This function returns the string ATT$ and the result of the 1670   !  attribute as it is received from an ASK$("lu",99) 1680   ! 1690     Disable abort 1700     Integer strt,fini 1710     Dim drv$ to 275,port$ to 1,att$ to 3 1720   ! 1730     Open #99:"comm"&port$&":" 1740     Drv$=ask$("lu",99) ! Get parameter string 1750     Close 99 1760   ! 1770   ! Get starting and ending position of the requested attribute 1780   ! 1790     Strt=pos(drv$,att$,1) 1800     Strt=pos(drv$,"=",strt) 1810     Fini=pos(drv$,",",strt) 1820   ! 1830     Get_att$=seg$(drv$,strt+1,fini-strt-1) ! Get result 1840   ! 1850     Enable abort 1860     Return 1870     End