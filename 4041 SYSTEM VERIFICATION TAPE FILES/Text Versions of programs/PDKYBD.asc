  100 Sub pdkybd local key1,key2,key3,key4,key5,key6,key7,key8,key9,key10,key11,key12,key13,key14,key15,key16,key17,key18,key19,key20,in,nxt_key,done,out$,abrt1,next$,spec_key  110   !  120   !  ********************  130   !  * PD KEYBOARD TEST *  140   !  ********************  150   !  160   ! Initialization  170   !  180     On abort then gosub abrt1  190     On key(1) then gosub key1  200     On key(2) then gosub key2  210     On key(3) then gosub key3  220     On key(4) then gosub key4  230     On key(5) then gosub key5  240     On key(6) then gosub key6  250     On key(7) then gosub key7  260     On key(8) then gosub key8  270     On key(9) then gosub key9  280     On key(10) then gosub key10  290     On key(11) then gosub key11  300     On key(12) then gosub key12  310     On key(13) then gosub key13  320     On key(14) then gosub key14  330     On key(15) then gosub key15  340     On key(16) then gosub key16  350     On key(17) then gosub key17  360     On key(18) then gosub key18  370     On key(19) then gosub key19  380     On key(20) then gosub key20  390     Enable keys  400     Integer in  410     Dim out$ to 256,term$ to 256  420     Dim next$ to 7  430     Term$=ask$("console")  440   !  450     Print "PD KEYBOARD TEST"  460     Set console "frtp:"  470     Open #2:"frtp:"  480     Next$="  NEXT?"  490     Out$=""  500     Print #2:"PRESS KEY"  510   !  520 Nxt_key:   ! Perform test  530     Rbyte #2:in  540     If in>127 then goto spec_key  550     If in<31 then out$=out$&"^"&chr$(in+64) else out$=out$&chr$(in)  560     Print #2:"ASCII = ";in;next$  570     Goto nxt_key  580 Spec_key:   !  590     Call prgkey(in,out$)  600     Goto nxt_key  610   !  620 Done:   ! Close files and finish up  630     Disable keys  640     Print #2:  650     Close 2  660     Print #"PRIN:":"CHARACTERS STRUCK"  670     Print #"PRIN:":out$  680     Set console term$  690     Print "PD KEYBOARD TEST EXIT"  700     Return  710   !  720   ! Handlers for all the function keys  730   !  740 Key1:     call fn_key("1",out$)  750     Branch nxt_key  760 Key2:     call fn_key("2",out$)  770     Branch nxt_key  780 Key3:     call fn_key("3",out$)  790     Branch nxt_key  800 Key4:     call fn_key("4",out$)  810     Branch nxt_key  820 Key5:     call fn_key("5",out$)  830     Branch nxt_key  840 Key6:     call fn_key("6",out$)  850     Branch nxt_key  860 Key7:     call fn_key("7",out$)  870     Branch nxt_key  880 Key8:     call fn_key("8",out$)  890     Branch nxt_key  900 Key9:     call fn_key("9",out$)  910     Branch nxt_key  920 Key10:     call fn_key("10",out$)  930     Branch nxt_key  940 Key11:     call fn_key("11",out$)  950     Branch nxt_key  960 Key12:     call fn_key("12",out$)  970     Branch nxt_key  980 Key13:     call fn_key("13",out$)  990     Branch nxt_key 1000 Key14:     call fn_key("14",out$) 1010     Branch nxt_key 1020 Key15:     call fn_key("15",out$) 1030     Branch nxt_key 1040 Key16:     call fn_key("16",out$) 1050     Branch nxt_key 1060 Key17:     call fn_key("17",out$) 1070     Branch nxt_key 1080 Key18:     call fn_key("18",out$) 1090     Branch nxt_key 1100 Key19:     call fn_key("19",out$) 1110     Branch nxt_key 1120 Key20:     call fn_key("20",out$) 1130     Branch nxt_key 1140 Abrt1:   ! <ABORT> handler 1150     Branch done 1160     End 1200 Sub fn_key(key$ var out$) 1210   ! 1220   ! This subprogram takes the value of KEY$ which is the ASCII string 1230   !  equivalent to the key number that was struck, and prints to 1240   !  #2 (FRTP:) the result and appends into OUT$ the string "FK" and the 1250   !  number of the function key 1260   ! 1270     Dim key$ to 2 1280     Print #2:"FK ";key$&"  NEXT?" 1290     Out$=out$&"FK"&key$ 1300     Return 1310     End 1400 Sub prgkey(curkey var out$) 1410   ! 1420   ! This subroutine determines if any of the program control or edit keys 1430   ! were pressed and reports that to the frtp.  If any ASCII value over 1440   ! 127 was passed and it was not found to be a program control or edit 1450   ! key, its value is displayed as a standard ASCII character would be. 1460   ! 1470   ! Initialization 1480   ! 1490     Integer curkey,ascin 1500     Dim keyname$ to 13 1510 Getkey:     data 170,"<AUTO LOAD>",175,"<AUTO NUMBER>",173,"<RUN>",174,"<LIST>" 1520     Data 177,"<RECALL PREV>",178,"<RECALL NEXT>",166,"<CLEAR>",176,"<RECALL>" 1530     Data 162,"<SCROLL <= >",163,"<SCROLL => >",160,"<CURSOR <= >" 1540     Data 161,"<CURSOR => >",167,"<INSERT>",179,"<DELETE>",164,"<DELETE <= >" 1550     Data 165,"<DELETE => >",168,"<STEP>",999,"DECIMAL = " 1560     Restore getkey 1570   ! 1580 Loop:   ! 1590     Read ascin,keyname$ 1600     If ascin=curkey then goto prntstr 1610     If ascin=999 then goto err_han 1620     Goto loop 1630 Prntstr:   ! 1640     Print #2:keyname$&"  NEXT?" 1650     Out$=out$&keyname$ 1660     Return 1670 Err_han:   ! 1680     Print #2:keyname$;curkey;"  NEXT?" 1690     Return 1700     End